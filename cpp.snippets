priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet ponce "#pragma once include guard"
#pragma once

endsnippet

snippet main
int main(int argc, char *argv[])
{
	${0}
	return 0;
}
endsnippet

snippet forc "general for loop (for)"
for (${6:auto} ${1:i} = ${2:v.begin()}; `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]` ${4:!=} ${3:`!p m = re.search(r'^(?:(.*)(\.|->)begin\(\)|((?:std|boost)::)?begin\((.*)\))$', t[2]); snip.rv = (((m.group(3) if m.group(3) else "") + "end(" + m.group(4) + ")") if m.group(4) else (m.group(1) + m.group(2) + "end()")) if m else ""`}; ${5:++`!p snip.rv = t[1].split(" ")[-1]`}) {
	${VISUAL}$0
}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet nsa "namespace alias"
namespace ${1:alias} = ${2:namespace};
endsnippet

snippet using "using directive/using declaration/type alias"
using ${1:namespace}`!p snip.rv = ' ' if t[1] == 'namespace' else ' = ' if t[1] != '' else ''`${2:name};
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

snippet boost_test "Boost test module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:TestCaseName})
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite "Boost test suite module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(${2:SuiteName})

BOOST_AUTO_TEST_CASE(${3:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
snippet boost_test_fixture "Boost test module with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite_fixture "Boost test suite with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)

BOOST_AUTO_TEST_CASE(${4:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet

snippet importsieve
int n;
std::vector<bool> is_prime(n+1, true);

void sieve(){
	is_prime[0] = is_prime[1] = false;
	for (int i = 2; i <= n; i++) {
    	if (is_prime[i] && (long long)i * i <= n) {
        	for (int j = i * i; j <= n; j += i)
            	is_prime[j] = false;
    	}
	}
}
$0
endsnippet

snippet importfastio
std::ios::sync_with_stdio(false);
std::cin.tie(nullptr); std::cout.tie(nullptr);
$0
endsnippet

snippet importmd
ll md(ll x){
	return x % MOD;
}
$0
endsnippet

snippet loadcp
/*
    author: https://codeforces.com/profile/krishnachandran
    text editor: NVIM v0.9.1
    compiler: GNU G++20 11.2.0 (64 bit,  winlibs)
*/
 
#include <bits/stdc++.h>

const char* BRIGHTYELLOW = "\033[1;93m";
const char* RESETCOLOR = "\033[0m";

#define dbg(x) std::cout << BRIGHTYELLOW << "\n" << #x << " " << x << RESETCOLOR << "\n";
#define couts(x) cout << x << " "
#define coutn(x) cout << x << "\n"
#define add(a, b, mod) ((a % mod) + (b % mod)) % mod
#define sub(a, b, mod) ((a % mod) - (b % mod)) % mod
#define mul(a, b, mod) ((a % mod) * (b % mod)) % mod
#define input_1d(a, n) for(ll i = 0; i < n; i++) std::cin >> a[i]
#define input_2d(a, r, c) for(ll i = 0; i < r; i++) for(ll j = 0; j < c; j++) std::cin >> a[i][j]
#define input_cn(a) for(auto &i: a) std::cin >> i
#define output_1d(a, n) for(ll i = 0; i < n; i++) std::cout << a[i] << " "
#define output_2d(a, r, c) for(ll i = 0; i < r; i++){for (ll j = 0; j < c; j++) std::cout << arr[i][j] << ' '; std::cout << "\n";}
#define output_cn(a) for(auto &i: a) std::cout << i << " "
#define sz(x) (x).size()
#define fi first
#define se second
 
typedef long long int ll;
typedef long double ld;
 
const ll MAXN = 1e5 + 10;
const ll MOD = 998244353;
const long double PI = std::acos(-1.0);

void solve(){	
	$0
}

void tst(bool test_cases){
    int tst = 1; if(test_cases) std::cin >> tst; while(tst--) solve(); return;
}

int main(int argc, char *argv[]){
    std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr);
    tst(true);
    return 0; 
}
endsnippet

snippet importisprime
bool isprime(ll x){
	for(ll i = 2 ; i <= std::sqrt(x); i++){
		if(x % i == 0){
			return false;
		}
	}
	return true;
}
$0
endsnippet

snippet importprntpr
void prntpr(ll x, ll y){
	std::cout << x << " " << y << "\n";
}
$0
endsnippet

snippet importtst
void tst(){
	ll T = 1; 
	std::cin >> T;
	while(T--) solve();
	return;
}
$0
endsnippet

snippet importnotst
void notst(){
	solve();
}
$0
endsnippet 

snippet importbinexp
long long binexp(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}
$0
endsnippet

snippet importmodexp
long long modexp(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
$0
endsnippet

snippet importinv
long long inv(long long a, long long m) {
  return a <= 1 ? a : m - (long long)(m/a) * inv(m % a, m) % m;
}
$0
endsnippet

# vim:ft=snippets:
